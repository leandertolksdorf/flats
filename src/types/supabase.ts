/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/flats": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.flats.id"];
          created_at?: parameters["rowFilter.flats.created_at"];
          city?: parameters["rowFilter.flats.city"];
          name?: parameters["rowFilter.flats.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["flats"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** flats */
          flats?: definitions["flats"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.flats.id"];
          created_at?: parameters["rowFilter.flats.created_at"];
          city?: parameters["rowFilter.flats.city"];
          name?: parameters["rowFilter.flats.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.flats.id"];
          created_at?: parameters["rowFilter.flats.created_at"];
          city?: parameters["rowFilter.flats.city"];
          name?: parameters["rowFilter.flats.name"];
        };
        body: {
          /** flats */
          flats?: definitions["flats"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/invitations": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.invitations.created_at"];
          created_by?: parameters["rowFilter.invitations.created_by"];
          expires?: parameters["rowFilter.invitations.expires"];
          shortcode?: parameters["rowFilter.invitations.shortcode"];
          flat_id?: parameters["rowFilter.invitations.flat_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["invitations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** invitations */
          invitations?: definitions["invitations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.invitations.created_at"];
          created_by?: parameters["rowFilter.invitations.created_by"];
          expires?: parameters["rowFilter.invitations.expires"];
          shortcode?: parameters["rowFilter.invitations.shortcode"];
          flat_id?: parameters["rowFilter.invitations.flat_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.invitations.created_at"];
          created_by?: parameters["rowFilter.invitations.created_by"];
          expires?: parameters["rowFilter.invitations.expires"];
          shortcode?: parameters["rowFilter.invitations.shortcode"];
          flat_id?: parameters["rowFilter.invitations.flat_id"];
        };
        body: {
          /** invitations */
          invitations?: definitions["invitations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/pglog": {
    get: {
      parameters: {
        query: {
          log_time?: parameters["rowFilter.pglog.log_time"];
          user_name?: parameters["rowFilter.pglog.user_name"];
          database_name?: parameters["rowFilter.pglog.database_name"];
          process_id?: parameters["rowFilter.pglog.process_id"];
          connection_from?: parameters["rowFilter.pglog.connection_from"];
          session_id?: parameters["rowFilter.pglog.session_id"];
          session_line_num?: parameters["rowFilter.pglog.session_line_num"];
          command_tag?: parameters["rowFilter.pglog.command_tag"];
          session_start_time?: parameters["rowFilter.pglog.session_start_time"];
          virtual_transaction_id?: parameters["rowFilter.pglog.virtual_transaction_id"];
          transaction_id?: parameters["rowFilter.pglog.transaction_id"];
          error_severity?: parameters["rowFilter.pglog.error_severity"];
          sql_state_code?: parameters["rowFilter.pglog.sql_state_code"];
          message?: parameters["rowFilter.pglog.message"];
          detail?: parameters["rowFilter.pglog.detail"];
          hint?: parameters["rowFilter.pglog.hint"];
          internal_query?: parameters["rowFilter.pglog.internal_query"];
          internal_query_pos?: parameters["rowFilter.pglog.internal_query_pos"];
          context?: parameters["rowFilter.pglog.context"];
          query?: parameters["rowFilter.pglog.query"];
          query_pos?: parameters["rowFilter.pglog.query_pos"];
          location?: parameters["rowFilter.pglog.location"];
          application_name?: parameters["rowFilter.pglog.application_name"];
          backend_type?: parameters["rowFilter.pglog.backend_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pglog"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          avatar_seed?: parameters["rowFilter.profiles.avatar_seed"];
          flat_id?: parameters["rowFilter.profiles.flat_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          avatar_seed?: parameters["rowFilter.profiles.avatar_seed"];
          flat_id?: parameters["rowFilter.profiles.flat_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          avatar_seed?: parameters["rowFilter.profiles.avatar_seed"];
          flat_id?: parameters["rowFilter.profiles.flat_id"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tasks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          frequency?: parameters["rowFilter.tasks.frequency"];
          date?: parameters["rowFilter.tasks.date"];
          name?: parameters["rowFilter.tasks.name"];
          flat_id?: parameters["rowFilter.tasks.flat_id"];
          interval?: parameters["rowFilter.tasks.interval"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tasks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          frequency?: parameters["rowFilter.tasks.frequency"];
          date?: parameters["rowFilter.tasks.date"];
          name?: parameters["rowFilter.tasks.name"];
          flat_id?: parameters["rowFilter.tasks.flat_id"];
          interval?: parameters["rowFilter.tasks.interval"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          frequency?: parameters["rowFilter.tasks.frequency"];
          date?: parameters["rowFilter.tasks.date"];
          name?: parameters["rowFilter.tasks.name"];
          flat_id?: parameters["rowFilter.tasks.flat_id"];
          interval?: parameters["rowFilter.tasks.interval"];
        };
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/generate_shortcode": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            size: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/join_flat": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            code: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_flat_id": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/file_fdw_handler": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/file_fdw_validator": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: oid */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/generate_uid": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            size: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/handle_new_flat": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/is_member_of_same_flat": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            user_id_2: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  flats: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    city?: string;
    /**
     * Format: text
     * @default Meine WG
     */
    name: string;
  };
  invitations: {
    /**
     * Format: date
     * @default CURRENT_DATE
     */
    created_at: string;
    /**
     * Format: uuid
     * @default auth.uid()
     */
    created_by?: string;
    /**
     * Format: date
     * @default (CURRENT_DATE + '5 days'::interval)
     */
    expires: string;
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_shortcode(6)
     */
    shortcode: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `flats.id`.<fk table='flats' column='id'/>
     */
    flat_id: string;
  };
  pglog: {
    /** Format: timestamp with time zone */
    log_time?: string;
    /** Format: text */
    user_name?: string;
    /** Format: text */
    database_name?: string;
    /** Format: integer */
    process_id?: number;
    /** Format: text */
    connection_from?: string;
    /** Format: text */
    session_id?: string;
    /** Format: bigint */
    session_line_num?: number;
    /** Format: text */
    command_tag?: string;
    /** Format: timestamp with time zone */
    session_start_time?: string;
    /** Format: text */
    virtual_transaction_id?: string;
    /** Format: bigint */
    transaction_id?: number;
    /** Format: text */
    error_severity?: string;
    /** Format: text */
    sql_state_code?: string;
    /** Format: text */
    message?: string;
    /** Format: text */
    detail?: string;
    /** Format: text */
    hint?: string;
    /** Format: text */
    internal_query?: string;
    /** Format: integer */
    internal_query_pos?: number;
    /** Format: text */
    context?: string;
    /** Format: text */
    query?: string;
    /** Format: integer */
    query_pos?: number;
    /** Format: text */
    location?: string;
    /** Format: text */
    application_name?: string;
    /** Format: text */
    backend_type?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    first_name: string;
    /**
     * Format: text
     * @default random()
     */
    avatar_seed: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `flats.id`.<fk table='flats' column='id'/>
     */
    flat_id?: string;
  };
  tasks: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: integer */
    frequency: number;
    /**
     * Format: date
     * @default now()
     */
    date: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `flats.id`.<fk table='flats' column='id'/>
     * @default public.get_flat_id(auth.uid())
     */
    flat_id: string;
    /** Format: public.time_interval */
    interval: "day" | "week" | "month";
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description flats */
  "body.flats": definitions["flats"];
  /** Format: uuid */
  "rowFilter.flats.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.flats.created_at": string;
  /** Format: text */
  "rowFilter.flats.city": string;
  /** Format: text */
  "rowFilter.flats.name": string;
  /** @description invitations */
  "body.invitations": definitions["invitations"];
  /** Format: date */
  "rowFilter.invitations.created_at": string;
  /** Format: uuid */
  "rowFilter.invitations.created_by": string;
  /** Format: date */
  "rowFilter.invitations.expires": string;
  /** Format: text */
  "rowFilter.invitations.shortcode": string;
  /** Format: uuid */
  "rowFilter.invitations.flat_id": string;
  /** @description pglog */
  "body.pglog": definitions["pglog"];
  /** Format: timestamp with time zone */
  "rowFilter.pglog.log_time": string;
  /** Format: text */
  "rowFilter.pglog.user_name": string;
  /** Format: text */
  "rowFilter.pglog.database_name": string;
  /** Format: integer */
  "rowFilter.pglog.process_id": string;
  /** Format: text */
  "rowFilter.pglog.connection_from": string;
  /** Format: text */
  "rowFilter.pglog.session_id": string;
  /** Format: bigint */
  "rowFilter.pglog.session_line_num": string;
  /** Format: text */
  "rowFilter.pglog.command_tag": string;
  /** Format: timestamp with time zone */
  "rowFilter.pglog.session_start_time": string;
  /** Format: text */
  "rowFilter.pglog.virtual_transaction_id": string;
  /** Format: bigint */
  "rowFilter.pglog.transaction_id": string;
  /** Format: text */
  "rowFilter.pglog.error_severity": string;
  /** Format: text */
  "rowFilter.pglog.sql_state_code": string;
  /** Format: text */
  "rowFilter.pglog.message": string;
  /** Format: text */
  "rowFilter.pglog.detail": string;
  /** Format: text */
  "rowFilter.pglog.hint": string;
  /** Format: text */
  "rowFilter.pglog.internal_query": string;
  /** Format: integer */
  "rowFilter.pglog.internal_query_pos": string;
  /** Format: text */
  "rowFilter.pglog.context": string;
  /** Format: text */
  "rowFilter.pglog.query": string;
  /** Format: integer */
  "rowFilter.pglog.query_pos": string;
  /** Format: text */
  "rowFilter.pglog.location": string;
  /** Format: text */
  "rowFilter.pglog.application_name": string;
  /** Format: text */
  "rowFilter.pglog.backend_type": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.created_at": string;
  /** Format: text */
  "rowFilter.profiles.first_name": string;
  /** Format: text */
  "rowFilter.profiles.avatar_seed": string;
  /** Format: uuid */
  "rowFilter.profiles.flat_id": string;
  /** @description tasks */
  "body.tasks": definitions["tasks"];
  /** Format: bigint */
  "rowFilter.tasks.id": string;
  /** Format: integer */
  "rowFilter.tasks.frequency": string;
  /** Format: date */
  "rowFilter.tasks.date": string;
  /** Format: text */
  "rowFilter.tasks.name": string;
  /** Format: uuid */
  "rowFilter.tasks.flat_id": string;
  /** Format: public.time_interval */
  "rowFilter.tasks.interval": string;
}

export interface operations {}

export interface external {}
